# Builds and runs tests in all three supported OSes
# Pushes CI feed if secrets.SLEET_CONNECTION is provided

name: build
on: 
  workflow_dispatch:
  push:
    branches: [ main, dev, 'feature/*', 'rel/*' ]
    paths-ignore:
      - changelog.md
      - code-of-conduct.md
      - security.md
      - support.md
  pull_request:
    types: [opened, synchronize, reopened]

env:
  DOTNET_NOLOGO: true

defaults:
  run:
    shell: bash

jobs:
  dotnet-format:
    runs-on: ubuntu-latest
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive
          fetch-depth: 0

      - name: ✓ ensure format
        run: |
          dotnet tool update -g dotnet-format --version 5.0.*
          dotnet restore
          dotnet format --check -v:diag

  build:
    name: build-${{ matrix.os }}
    needs: dotnet-format
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive
          fetch-depth: 0

      - name: 🙏 build
        run: dotnet build -m:1 -p:VersionLabel="$GITHUB_REF.$GITHUB_RUN_NUMBER"

      - name: ⚙ GNU grep
        if: matrix.os == 'macOS-latest'
        run: |
          brew install grep
          echo 'export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"' >> .bash_profile

      - name: 🧪 test
        shell: bash --noprofile --norc {0}
        env:
          LC_ALL: en_US.utf8
        run: |
          [ -f .bash_profile ] && source .bash_profile
          counter=0
          exitcode=0
          reset="\e[0m"
          warn="\e[0;33m"
          while [ $counter -lt 6 ]
          do
              if [ $filter ]
              then
                  echo -e "${warn}Retry $counter for $filter ${reset}"
              fi
              # run test and forward output also to a file in addition to stdout (tee command)
              dotnet test --no-build -m:1 --blame-hang --blame-hang-timeout 5m --filter=$filter | tee ./output.log
              # capture dotnet test exit status, different from tee
              exitcode=${PIPESTATUS[0]}
              if [ $exitcode == 0 ]
              then
                  exit 0
              fi
              # cat output, get failed test names, join as DisplayName=TEST with |, remove trailing |.
              filter=$(cat ./output.log | grep -o -P '(?<=\sFailed\s)\w*' | awk 'BEGIN { ORS="|" } { print("DisplayName=" $0) }' | grep -o -P '.*(?=\|$)')
              ((counter++))
          done
          exit $exitcode

      - name: 📦 pack
        run: dotnet pack -m:1 -p:VersionLabel="$GITHUB_REF.$GITHUB_RUN_NUMBER"

      # Only push CI package to sleet feed if building on ubuntu (fastest)
      - name: 🚀 sleet
        env:
          SLEET_CONNECTION: ${{ secrets.SLEET_CONNECTION }}
        if: matrix.os == 'ubuntu-latest' && env.SLEET_CONNECTION != ''
        run: |
          dotnet tool install -g --version 4.0.18 sleet 
          sleet push bin --config none -f --verbose -p "SLEET_FEED_CONTAINER=nuget" -p "SLEET_FEED_CONNECTIONSTRING=${{ secrets.SLEET_CONNECTION }}" -p "SLEET_FEED_TYPE=azure" || echo "No packages found"
