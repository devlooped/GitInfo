using Microsoft.CodeAnalysis;

[Generator(LanguageNames.CSharp)]
class GitInfoGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var ns = context.AnalyzerConfigOptionsProvider
            .Select((c, _) => c.GlobalOptions.TryGetValue("build_property.ThisAssemblyNamespace", out var ns)
                && !string.IsNullOrEmpty(ns) ? ns : null);

        context.RegisterSourceOutput(ns,
            (c, ns) =>
            {
                // Legacy codegen used for this scenario, emit nothing.
                if (!string.IsNullOrEmpty(ns))
                    return;

                c.AddSource("ThisAssembly.Git.IsDirty.g",
                    $$"""
                    //------------------------------------------------------------------------------
                    // <auto-generated>
                    //     This code was generated by a tool.
                    //
                    //     GitInfo: {{ThisAssembly.Info.InformationalVersion}}
                    //
                    //     Changes to this file may cause incorrect behavior and will be lost if
                    //     the code is regenerated.
                    // </auto-generated>
                    //------------------------------------------------------------------------------

                    partial class ThisAssembly
                    {
                        partial class Git
                        {
                            /// <summary>
                            /// Gets whether the current repository is dirty.
                            /// </summary>
                            public static bool IsDirty => bool.TryParse(IsDirtyString, out var dirty) && dirty;
                        }
                    }
                    """);
            });
    }
}