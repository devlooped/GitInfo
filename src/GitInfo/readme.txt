Git Info from MSBuild, C# and VB
--------------------------------
Exposes the following information for use directly from any MSBuild 
target that depends on the GitInfo target:

  $(GitRepositoryUrl)
  $(GitBranch)
  $(GitCommit)
  $(GitCommitDate)
  $(GitCommits)
  $(GitTag)
  $(GitBaseTag)
  $(GitBaseVersionMajor)
  $(GitBaseVersionMinor)
  $(GitBaseVersionPatch)
  $(GitSemVerMajor)
  $(GitSemVerMinor)
  $(GitSemVerPatch)
  $(GitSemVerLabel)
  $(GitSemVerDashLabel)
  $(GitSemVerSource)
  $(GitIsDirty)

From C#, F# and VB, by default code is generated too so that the same 
information can be accessed from code, to construct your own 
assembly/file version attributes with whatever format you want:

[assembly: AssemblyVersion (ThisAssembly.Git.SemVer.Major + "." + ThisAssembly.Git.SemVer.Minor + "." + ThisAssembly.Git.SemVer.Patch)]
[assembly: AssemblyInformationalVersion (
  ThisAssembly.Git.SemVer.Major + "." +
  ThisAssembly.Git.SemVer.Minor + "." +
  ThisAssembly.Git.SemVer.Patch + "-" +
  ThisAssembly.Git.Branch + "+" +
  ThisAssembly.Git.Commit)]
// i..e ^: 1.0.2-main+c218617

** NOTE: you may need to close and reopen the solution in order 
         for Visual Studio to refresh intellisense and show the 
         ThisAssembly type right after package installation for 
         the first time.

All generated constants also have a Summary documentation tag 
that shows the current value in the intellisense tooltip, making 
it very easy to see what the different values contain.

The available constants from code are:

  ThisAssembly.Git.RepositoryUrl
  ThisAssembly.Git.Branch
  ThisAssembly.Git.Commit
  ThisAssembly.Git.Commits
  ThisAssembly.Git.Tag
  ThisAssembly.Git.BaseTag
  ThisAssembly.Git.BaseVersion.Major
  ThisAssembly.Git.BaseVersion.Minor
  ThisAssembly.Git.BaseVersion.Patch
  ThisAssembly.Git.SemVer.Major
  ThisAssembly.Git.SemVer.Minor
  ThisAssembly.Git.SemVer.Patch
  ThisAssembly.Git.SemVer.Label
  ThisAssembly.Git.SemVer.DashLabel
  ThisAssembly.Git.SemVer.Source
  ThisAssembly.Git.IsDirty
  

Available MSBuild customizations:

  $(GitThisAssembly):
    * Enables or Disables `class ThisAssembly` for this project's output assembly.
    * e.g. `<GitThisAssembly>true</GitThisAssembly>`
       * Set to 'true' to generate class ThisAssembly containing const strings.
       * Set to 'false' to not generate anything for this project.
    * Defaults to 'false' (i.e. GitInfo is opt-in).

  $(GitThisAssemblyMetadata):
    * Enables or Disables `[assembly: AssemblyMetadata("GitInfo...")]` for this project's output assembly.
        * Set to 'true' to generate `[assembly: AssemblyMetadata("GitInfo...")]` assembly attributes at compile-time.
        * Set to 'false' to not generate any `[assembly: AssemblyMetadata("GitInfo...")]` assembly attributes - instead only `class ThisAssembly` will be generated.
    * Defaults to 'false' (i.e. `[assembly: AssemblyMetadata("GitInfo...")]` assembly attributes are not generated by default, even when $(GitThisAssembly) is enabled).
    * Note that the $(GitThisAssembly) property must also be set to 'true' for this property to take effect.
      * For example, copy this snippet into your csproj:
      ```
      <PropertyGroup Label="GitInfo Properties">
          <GitThisAssembly>true</GitThisAssembly>
          <GitThisAssemblyMetadata>true</GitThisAssemblyMetadata>
      </PropertyGroup>
      ```

  $(ThisAssemblyNamespace): 
    * Overrides the C# namespace that the generated `class ThisAssembly` exists in.
    * By default the C# project's default namespace is used. This is in the C# MSBuild `<RootNamespace></RootNamespace>` property, which in-turn defaults to the project's name as displayed in Solution Explorer.

  $(GitRemote):
    * Specifies the name of the Git Remote to get the repository URL for, the repository URL is then exposed via the `ThisAssembly.Git.RepositoryUrl` string or the `AssemblyMetadata("GitInfo.RepositoryUrl)` attribute.
    * You can get a list of your remotes by running `git remote -v` in your shell when inside your git repo.
    * Defaults to 'origin'.
  
  $(GitBranchCI): 
    * Determines whether the branch name should be populated from default environment variables used by the CI system. Default to 'true'.

  $(GitDefaultBranch):
    * Specifies the base branch which is compared to your current branch (at time of build) to determine how many commits ahead the current branch is compared to base.
    * Defaults to 'master'.

  $(GitVersionFile):
    * Specifies the name of a file in the Git repository root used to provide the base version info.
    * Defaults to 'GitInfo.txt'.

  $(GitInfoReportImportance):
    * Specifies the minimum message importance of messages from `git info` in order to be included in the rendered messages when your project builds.
    * Possible values are 'high', 'normal', and 'low'.
      * Using a value of 'high' will mean only high-importance messages will be rendered.
      * Using a value of 'normal' will mean high and medium -importance messages will be rendered, but not low-importance messages.
      * Using a value of 'low' will cause all messages to be rendered.
    * Defaults to 'low'.

  $(GitIgnoreBranchVersion):
  $(GitIgnoreTagVersion):
    * Specifies whether the current branch and tags, respectively, will be used to find a base version.
    * Defaults to '' (an empty value) which means no branches or tags will be ignored.

  $(GitSkipCache):
    * Specifies that GitInfo should always ignore Git information determined in a previous build.
    * Cache information is stored in a file named 'GitInfo.cache'. This improves build time performance.
        * This file will be saved to your intermediate build output directory (`<IntermediateOutputPath>`), by default this is `\obj\(config)\(platform)\`.
           * For example `MyProjectFolder\obj\net48\GitInfo.cache`
    * By defalt this is 
           in a previous build in a GitInfo.cache for
           performance reasons.
           Defaults to empty value (no ignoring).

  $(GitNameRevOptions):
    * Specifies the command-line options passed to `git name-rev` when determining the current branch name for the current commit (Detached head).
    * The default is '--refs=refs/heads/* --no-undefined --alwas'
        * This default means that only branch names will be used, otherwise it will fallback to using the current commit's hash.
    * For legacy behavior where $(GitBranch) for detached head can also be a tag name, use '--refs=refs/*'. Refs can be included and excluded, see git name-rev docs.

  $(GitTagRegex):
    * Regular expression (.NET Regex syntax) used with git describe to filter the tags to consider for base version lookup.
    * Defaults to '*' (i.e. match all tag names)
           
  $(GitBaseVersionRegex):
    * Regular expression used to match and validate valid base versions in branch, tag or file sources.
    * Defaults to a regular-expression (see below) which matches any string that *ends* in a valid SemVer2 string.
        * ```
          v?(?<MAJOR>\d+)\.(?<MINOR>\d+)\.(?<PATCH>\d+)(?:\-(?<LABEL>[\dA-Za-z\-\.]+))?$|^(?<LABEL>[\dA-Za-z\-\.]+)\-v?(?<MAJOR>\d+)\.(?<MINOR>\d+)\.(?<PATCH>\d+)$
          ---
        * For example, the above regex will match and parse a version string like "foobar-v1.2.3-baz" or "baz-v1.2.3".
